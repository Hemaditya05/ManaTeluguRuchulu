import streamlit as st
from pymongo import MongoClient
import gridfs
import datetime
from bson.objectid import ObjectId
from passlib.hash import pbkdf2_sha256
import base64

# --- Page Configuration ---
st.set_page_config(layout="wide", initial_sidebar_state="collapsed")

# --- Language Translations ---
translations = {
    "en": {
        "title": "Traditional Telugu Cuisine Data Platform",
        "subtitle": "A living repository for authentic Telugu food heritage.",
        "nav_home": "Home",
        "nav_explore": "Explore",
        "nav_contribute": "Contribute",
        "nav_about": "About",
        "nav_contact": "Contact",
        "login": "Login",
        "signup": "Sign Up",
        "logout": "Logout",
        "welcome": "Welcome",
        "explore_header": "Explore Our Culinary Heritage",
        "explore_intro": "Browse recipes and food memories shared by our community.",
        "contribute_header": "Contribute a Recipe or Food Memory",
        "recipe_name": "Recipe Name",
        "region": "Region (e.g., Telangana, Andhra Pradesh, District, Village)",
        "food_type": "Food Type",
        "breakfast": "Breakfast",
        "lunch": "Lunch",
        "dinner": "Dinner",
        "snack": "Snack",
        "sweet": "Sweet",
        "pickle": "Pickle",
        "other": "Other",
        "ingredients": "Ingredients (one per line)",
        "steps": "Preparation Steps",
        "images": "Upload Images",
        "videos": "Upload Videos",
        "audios": "Upload Audio (interviews, instructions)",
        "contributor_name": "Your Name (optional)",
        "contributor_email": "Your Email (optional)",
        "bio": "Short Bio / Context (optional)",
        "submit": "Submit",
        "success_msg": "Your submission has been saved! Thank you for contributing. üôè",
        "about_header": "About the Project",
        "about_text": "This platform is designed to collect and preserve the rich food heritage of Telugu-speaking regions. By enabling users to contribute recipes, images, and stories, we aim to create a digital archive that keeps our culinary legacy alive for future generations. Join us!",
        "contact_header": "Contact Us",
        "contact_info": "Email: support@Team10-1 | Hyderabad, Telangana",
        "login_header": "Login to Your Account",
        "signup_header": "Create a New Account",
        "username": "Username",
        "password": "Password",
        "username_exists": "Username already exists. Please choose another one.",
        "signup_success": "Account created successfully! Please login.",
        "login_error": "Invalid username or password.",
    },
    "te": {
        "title": "‡∞∏‡∞æ‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞µ‡∞Ç‡∞ü‡∞≤ ‡∞°‡±á‡∞ü‡∞æ ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Æ‡±ç",
        "subtitle": "‡∞™‡±ç‡∞∞‡∞æ‡∞Æ‡∞æ‡∞£‡∞ø‡∞ï‡∞Æ‡±à‡∞® ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞í‡∞ï ‡∞∏‡∞ú‡±Ä‡∞µ ‡∞≠‡∞æ‡∞Ç‡∞°‡∞æ‡∞ó‡∞æ‡∞∞‡∞Ç.",
        "nav_home": "‡∞π‡±ã‡∞Æ‡±ç",
        "nav_explore": "‡∞Ö‡∞®‡±ç‡∞µ‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "nav_contribute": "‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "nav_about": "‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø",
        "nav_contact": "‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "login": "‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç",
        "signup": "‡∞∏‡±à‡∞®‡±ç ‡∞Ö‡∞™‡±ç",
        "logout": "‡∞≤‡∞æ‡∞ó‡±ç‡∞Ö‡∞µ‡±Å‡∞ü‡±ç",
        "welcome": "‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç",
        "explore_header": "‡∞Æ‡∞æ ‡∞µ‡∞Ç‡∞ü‡∞≤ ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞®‡±ç‡∞µ‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "explore_intro": "‡∞Æ‡∞æ ‡∞∏‡∞Ç‡∞ò‡∞Ç ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞® ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞ú‡±ç‡∞û‡∞æ‡∞™‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞¨‡±ç‡∞∞‡±å‡∞ú‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "contribute_header": "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞ú‡±ç‡∞û‡∞æ‡∞™‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "recipe_name": "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞™‡±á‡∞∞‡±Å",
        "region": "‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞Ç (‡∞â‡∞¶‡∞æ., ‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£, ‡∞Ü‡∞Ç‡∞ß‡±ç‡∞∞‡∞™‡±ç‡∞∞‡∞¶‡±á‡∞∂‡±ç, ‡∞ú‡∞ø‡∞≤‡±ç‡∞≤‡∞æ, ‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ‡∞Ç)",
        "food_type": "‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞∞‡∞ï‡∞Ç",
        "breakfast": "‡∞Ö‡∞≤‡±ç‡∞™‡∞æ‡∞π‡∞æ‡∞∞‡∞Ç",
        "lunch": "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞® ‡∞≠‡±ã‡∞ú‡∞®‡∞Ç",
        "dinner": "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø ‡∞≠‡±ã‡∞ú‡∞®‡∞Ç",
        "snack": "‡∞ö‡∞ø‡∞∞‡±Å‡∞§‡∞ø‡∞Ç‡∞°‡∞ø",
        "sweet": "‡∞§‡±Ä‡∞™‡∞ø",
        "pickle": "‡∞™‡∞ö‡±ç‡∞ö‡∞°‡∞ø",
        "other": "‡∞á‡∞§‡∞∞",
        "ingredients": "‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡±ç‡∞∏‡∞ø‡∞® ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡±Å (‡∞í‡∞ï ‡∞™‡∞Ç‡∞ï‡±ç‡∞§‡∞ø‡∞ï‡∞ø ‡∞í‡∞ï‡∞ü‡∞ø)",
        "steps": "‡∞§‡∞Ø‡∞æ‡∞∞‡±Ä ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞Ç",
        "images": "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "videos": "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "audios": "‡∞Ü‡∞°‡∞ø‡∞Ø‡±ã‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞µ‡±ç‡∞Ø‡±Ç‡∞≤‡±Å, ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å)",
        "contributor_name": "‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)",
        "contributor_email": "‡∞Æ‡±Ä ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)",
        "bio": "‡∞∏‡∞Ç‡∞ï‡±ç‡∞∑‡∞ø‡∞™‡±ç‡∞§ ‡∞™‡∞∞‡∞ø‡∞ö‡∞Ø‡∞Ç / ‡∞∏‡∞Ç‡∞¶‡∞∞‡±ç‡∞≠‡∞Ç (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)",
        "submit": "‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡±Å",
        "success_msg": "‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞£ ‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø! ‡∞∏‡∞π‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø‡∞®‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å. üôè",
        "about_header": "‡∞™‡±ç‡∞∞‡∞æ‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø",
        "about_text": "‡∞à ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Æ‡±ç ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±á ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞æ‡∞≤ ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞ó‡±ä‡∞™‡±ç‡∞™ ‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡±á‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø, ‡∞≠‡∞¶‡±ç‡∞∞‡∞™‡∞∞‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡±Å, ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ï‡∞•‡∞≤‡∞®‡±Å ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø‡∞Ç‡∞ö‡∞°‡∞Ç ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ, ‡∞Æ‡∞æ ‡∞™‡∞æ‡∞ï ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞≠‡∞µ‡∞ø‡∞∑‡±ç‡∞Ø‡∞§‡±ç ‡∞§‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞∏‡∞ú‡±Ä‡∞µ‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞ö‡±á ‡∞°‡∞ø‡∞ú‡∞ø‡∞ü‡∞≤‡±ç ‡∞Ü‡∞∞‡±ç‡∞ï‡±à‡∞µ‡±ç‚Äå‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞®‡∞ø ‡∞Æ‡±á‡∞Æ‡±Å ‡∞≤‡∞ï‡±ç‡∞∑‡±ç‡∞Ø‡∞Ç‡∞ó‡∞æ ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å. ‡∞Æ‡∞æ‡∞§‡±ã ‡∞ö‡±á‡∞∞‡∞Ç‡∞°‡∞ø!",
        "contact_header": "‡∞Æ‡∞Æ‡±ç‡∞Æ‡∞≤‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "contact_info": "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç: support@switchr.org | ‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç, ‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£",
        "login_header": "‡∞Æ‡±Ä ‡∞ñ‡∞æ‡∞§‡∞æ‡∞≤‡±ã‡∞ï‡∞ø ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞Ö‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø",
        "signup_header": "‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞ñ‡∞æ‡∞§‡∞æ‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "username": "‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç‚Äå‡∞®‡±á‡∞Æ‡±ç",
        "password": "‡∞™‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞°‡±ç",
        "username_exists": "‡∞à ‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç‚Äå‡∞®‡±á‡∞Æ‡±ç ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞∞‡±ä‡∞ï‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.",
        "signup_success": "‡∞ñ‡∞æ‡∞§‡∞æ ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø! ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "login_error": "‡∞§‡∞™‡±ç‡∞™‡±Å ‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç‚Äå‡∞®‡±á‡∞Æ‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞°‡±ç.",
    }
}

if "page" not in st.session_state:
    st.session_state.page = "Home"
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "username" not in st.session_state:
    st.session_state.username = ""
if 'lang' not in st.session_state:
    st.session_state.lang = 'en'

def T(key):
    return translations[st.session_state.lang].get(key, key)

# --- MongoDB Setup ---
MONGO_URI = "mongodb://localhost:27017"
client = MongoClient(MONGO_URI)
db = client["telugu_cuisine_db"]
submissions_collection = db["submissions"]
users_collection = db["users"]
fs = gridfs.GridFS(db)

# --- Inject custom CSS ---
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# --- Authentication Functions ---
def signup_user(username, password):
    if users_collection.find_one({"username": username}):
        return False
    hashed_password = pbkdf2_sha256.hash(password)
    users_collection.insert_one({"username": username, "password": hashed_password})
    return True

def check_user(username, password):
    user = users_collection.find_one({"username": username})
    if user and pbkdf2_sha256.verify(password, user["password"]):
        return True
    return False

# --- Data Functions ---
def save_submission(data, images, videos, audios):
    file_ids = {"images": [], "videos": [], "audios": []}
    for img in images:
        fid = fs.put(img.read(), filename=img.name, content_type=img.type)
        file_ids["images"].append(fid)
    for vid in videos:
        fid = fs.put(vid.read(), filename=vid.name, content_type=vid.type)
        file_ids["videos"].append(fid)
    for aud in audios:
        fid = fs.put(aud.read(), filename=aud.name, content_type=aud.type)
        file_ids["audios"].append(fid)
    data["file_ids"] = file_ids
    data["created_at"] = datetime.datetime.utcnow()
    data["submitted_by"] = st.session_state.username
    submissions_collection.insert_one(data)

def get_all_submissions():
    return list(submissions_collection.find().sort("created_at", -1))

def get_image(file_id):
    try:
        gridout = fs.get(file_id)
        base64_img = base64.b64encode(gridout.read()).decode('utf-8')
        return f"data:{gridout.content_type};base64,{base64_img}"
    except Exception:
        return None

# --- UI Components ---
def language_switcher():
    with st.container():
        cols = st.columns([1, 1])
        with cols[0]:
            if st.button("English", use_container_width=True, key="lang_en"):
                st.session_state.lang = 'en'
                st.rerun()
        with cols[1]:
            if st.button("‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", use_container_width=True, key="lang_te"):
                st.session_state.lang = 'te'
                st.rerun()

def main_nav():
    NAV_PAGES = ["nav_home", "nav_explore", "nav_contribute", "nav_about", "nav_contact"]
    page_map = {"nav_home": "Home", "nav_explore": "Explore", "nav_contribute": "Contribute", "nav_about": "About", "nav_contact": "Contact"}

    cols = st.columns(len(NAV_PAGES))
    for i, page_key in enumerate(NAV_PAGES):
        with cols[i]:
            if st.button(T(page_key), key=f"nav-{page_key}", use_container_width=True):
                st.session_state.page = page_map[page_key]
                st.rerun()

def auth_nav():
    if st.session_state.logged_in:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f"<div class='welcome-text'>{T('welcome')}, {st.session_state.username}!</div>", unsafe_allow_html=True)
        with col2:
            if st.button(T('logout'), key="logout_btn", use_container_width=True):
                st.session_state.logged_in = False
                st.session_state.username = ""
                st.session_state.page = "Home"
                st.rerun()
    else:
        col1, col2 = st.columns(2)
        with col1:
            if st.button(T('login'), key="login_nav", use_container_width=True):
                st.session_state.page = "Login"
                st.rerun()
        with col2:
            if st.button(T('signup'), key="signup_nav", use_container_width=True):
                st.session_state.page = "Signup"
                st.rerun()

# --- Header Section ---
with st.container():
    col1, col2, col3 = st.columns([1.5, 5, 1.5])
    with col1:
        language_switcher()
    with col2:
        main_nav()
    with col3:
        auth_nav()
    st.markdown("<hr class='header-divider'>", unsafe_allow_html=True)

# --- Page Routing ---
if st.session_state.page == "Home":
    st.markdown(f"<div class='main-container home-content'>", unsafe_allow_html=True)
    st.markdown(f"<h1>{T('title')}</h1>", unsafe_allow_html=True)
    st.markdown(f"<p class='subtitle'>{T('subtitle')}</p>", unsafe_allow_html=True)
    
    if st.button(T('nav_explore'), key="home_explore_btn", type="primary"):
        st.session_state.page = "Explore"
        st.rerun()
    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.page == "Explore":
    st.markdown(f"<div class='main-container'>", unsafe_allow_html=True)
    st.markdown(f"<h2>{T('explore_header')}</h2>", unsafe_allow_html=True)
    st.markdown(f"<p>{T('explore_intro')}</p>", unsafe_allow_html=True)

    submissions = get_all_submissions()
    if not submissions:
        st.info("No recipes have been submitted yet. Be the first to contribute!")
    else:
        for sub in submissions:
            with st.container():
                st.markdown("<div class='recipe-card'>", unsafe_allow_html=True)
                cols = st.columns([1, 2])
                with cols[0]:
                    # Image
                    if sub.get("file_ids", {}).get("images"):
                        img_data = get_image(sub["file_ids"]["images"][0])
                        if img_data:
                            st.image(img_data, use_column_width=True)
                    else:
                        st.image("https://via.placeholder.com/300", use_column_width=True)
                    # Videos
                    if sub.get("file_ids", {}).get("videos"):
                        for vid_fid in sub["file_ids"]["videos"]:
                            video_bytes = fs.get(vid_fid).read()
                            st.video(video_bytes)
                    # Audios
                    if sub.get("file_ids", {}).get("audios"):
                        for aud_fid in sub["file_ids"]["audios"]:
                            audio_bytes = fs.get(aud_fid).read()
                            st.audio(audio_bytes)
                with cols[1]:
                    st.markdown(f"<h3>{sub.get('recipe_name', 'No Title')}</h3>", unsafe_allow_html=True)
                    st.markdown(f"**{T('region')}:** {sub.get('region', 'N/A')}", unsafe_allow_html=True)
                    st.markdown(f"**{T('food_type')}:** {sub.get('food_type', 'N/A')}", unsafe_allow_html=True)
                    with st.expander(f"View Details"):
                        st.markdown(f"**{T('ingredients')}:**\n<pre>{sub.get('ingredients', '')}</pre>", unsafe_allow_html=True)
                        st.markdown(f"**{T('steps')}:**\n<pre>{sub.get('steps', '')}</pre>", unsafe_allow_html=True)
                        if sub.get('submitted_by'):
                             st.markdown(f"<p class='submitted-by'>Submitted by: {sub.get('submitted_by')}</p>", unsafe_allow_html=True)
                st.markdown("</div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.page == "Contribute":
    if not st.session_state.logged_in:
        st.warning("Please log in to contribute a recipe.")
        if st.button(T('login')):
            st.session_state.page = "Login"
            st.rerun()
    else:
        st.markdown("<div class='form-container'>", unsafe_allow_html=True)
        st.markdown(f"<h2>{T('contribute_header')}</h2>", unsafe_allow_html=True)
        with st.form("contribute_form", clear_on_submit=True):
            recipe_name = st.text_input(T("recipe_name"))
            region = st.text_input(T("region"))
            food_type = st.selectbox(T("food_type"), [T("breakfast"), T("lunch"), T("dinner"), T("snack"), T("sweet"), T("pickle"), T("other")])
            ingredients = st.text_area(T("ingredients"), height=150)
            steps = st.text_area(T("steps"), height=250)
            images = st.file_uploader(T("images"), accept_multiple_files=True, type=['png', 'jpg', 'jpeg'])
            videos = st.file_uploader(T("videos"), accept_multiple_files=True, type=['mp4', 'mov', 'avi', 'mkv'])
            audios = st.file_uploader(T("audios"), accept_multiple_files=True, type=['mp3', 'wav', 'ogg'])
            submit = st.form_submit_button(T("submit"), type="primary")
        if submit:
            data = {
                "recipe_name": recipe_name, "region": region, "food_type": food_type,
                "ingredients": ingredients, "steps": steps
            }
            save_submission(data, images or [], videos or [], audios or [])
            st.success(T("success_msg"))
        st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.page == "About":
    st.markdown(f"<div class='main-container text-page'>", unsafe_allow_html=True)
    st.markdown(f"<h2>{T('about_header')}</h2>", unsafe_allow_html=True)
    st.markdown(f"<p>{T('about_text')}</p>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.page == "Contact":
    st.markdown(f"<div class='main-container text-page'>", unsafe_allow_html=True)
    st.markdown(f"<h2>{T('contact_header')}</h2>", unsafe_allow_html=True)
    st.markdown(f"<div class='contact-box'>{T('contact_info')}</div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.page == "Login":
    st.markdown("<div class='form-container auth-form'>", unsafe_allow_html=True)
    st.markdown(f"<h2>{T('login_header')}</h2>", unsafe_allow_html=True)
    with st.form("login_form"):
        username = st.text_input(T("username"))
        password = st.text_input(T("password"), type="password")
        submit = st.form_submit_button(T("login"), type="primary")
    if submit:
        if check_user(username, password):
            st.session_state.logged_in = True
            st.session_state.username = username
            st.session_state.page = "Explore"
            st.rerun()
        else:
            st.error(T("login_error"))
    st.markdown("</div>", unsafe_allow_html=True)

elif st.session_state.page == "Signup":
    st.markdown("<div class='form-container auth-form'>", unsafe_allow_html=True)
    st.markdown(f"<h2>{T('signup_header')}</h2>", unsafe_allow_html=True)
    with st.form("signup_form"):
        username = st.text_input(T("username"))
        password = st.text_input(T("password"), type="password")
        submit = st.form_submit_button(T("signup"), type="primary")
    if submit:
        if signup_user(username, password):
            st.success(T("signup_success"))
            st.session_state.page = "Login"
            st.rerun()
        else:
            st.error(T("username_exists"))
    st.markdown("</div>", unsafe_allow_html=True)
